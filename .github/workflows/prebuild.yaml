# Triggering prebuilds:
# 1. Create a draft release manually using the GitHub UI.
# 2. Set the `jobs.*.strategy.matrix.node` arrays to the set of Node.js versions
#    to build for.
# 3. Set the `jobs.*.strategy.matrix.canvas_tag` arrays to the set of Canvas
#    tags to build. (Usually this is a single tag, but can be an array when a
#    new version of Node.js is released and older versions of Canvas need to be
#    built.)
# 4. Commit and push this file to master.
# 5. In the Actions tab, navigate to the "Make Prebuilds" workflow and click
#    "Run workflow".
# 6. Once the builds succeed, promote the draft release to a full release.

name: Prebuild
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  CANVAS_VERSION_TO_BUILD: ${{ github.ref_name }}

jobs:
  Release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          allowUpdates: true
          removeArtifacts: true

  Debian:
    needs:
      - Release
    strategy:
      matrix:
        node: [ 18, 20 ]
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-slim
    name: Node.js ${{ matrix.node }}, Debian
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: . ./prebuild/Debian/preinstall.sh
      - name: Build
        run: npm install --build-from-source
      - name: Test
        run: npm test
      - name: Bundle
        run: . ./prebuild/Debian/bundle.sh
      - name: Test binary
        # need to remove deps
        run: npm test
      - name: Make asset
        id: make_asset
        run: . ./prebuild/tarball.sh
      - name: Upload asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ steps.make_asset.outputs.asset_name }}
          artifactContentType: application/tar+gz

  Alpine:
    needs:
      - Release
    strategy:
      matrix:
        node: [ 18, 20 ]
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    name: Node.js ${{ matrix.node }}, Alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: . ./prebuild/Alpine/preinstall.sh
      - name: Build
        run: npm install --build-from-source
      - name: Test
        # some tests failed
        continue-on-error: true
        run: npm test
      - name: Bundle
        run: . ./prebuild/Debian/bundle.sh
      - name: Test binary
        # some tests failed
        continue-on-error: true
        # need to remove deps
        run: npm test
      - name: Make asset
        id: make_asset
        run: . ./prebuild/tarball.sh
      - name: Upload asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ steps.make_asset.outputs.asset_name }}
          artifactContentType: application/tar+gz

  macOS:
    needs:
      - Release
    strategy:
      matrix:
        node: [ 18, 20 ]
        os:
          - runner: macos-latest
            arch: x64
    #     - runner: macos-latest-xlarge # GitHub's Apple Silicon runner
    #       arch: arm64
    runs-on: ${{ matrix.os.runner }}
    name: Node.js ${{ matrix.node }}, macOS ${{ matrix.os.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.JS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Install Dependencies
        run: . ./prebuild/macOS/preinstall.sh
      - name: Build
        run: npm install --build-from-source
      - name: Test
        run: npm test
      - name: Bundle
        run: |
          . ./prebuild/macOS/prebundle.sh
          . ./prebuild/macOS/bundle.sh
      - name: Test binary
        # need to remove deps
        run: npm test
      - name: Make bundle
        id: make_bundle
        run: . prebuild/tarball.sh
      - name: Make asset
        id: make_asset
        run: . ./prebuild/tarball.sh
      - name: Upload asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ steps.make_asset.outputs.asset_name }}
          artifactContentType: application/tar+gz

  Windows:
    needs:
      - Release
    strategy:
      matrix:
        node: [ 18, 20 ]
    name: Node.js ${{ matrix.node }}, Windows
    runs-on: windows-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Checkout
        uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          path-type: inherit
      - name: Install Dependencies
        shell: msys2 {0}
        run: . ./prebuild/Windows/preinstall.sh
      - name: Build
        shell: msys2 {0}
        run: npm install --build-from-source
      - name: Test
        shell: msys2 {0}
        # FIXME: Node.js 20.x is currently broken on Windows, in the `registerFont`
        continue-on-error: true
        run: npm test
      - name: Bundle
        shell: msys2 {0}
        run: . prebuild/Windows/bundle.sh
      - name: Test binary
        # By not running in msys2, this doesn't have access to the msys2 libs
        run: npm test
        # FIXME: Node.js 20.x is currently broken on Windows, in the `registerFont`
        continue-on-error: true
      - name: Make asset
        id: make_asset
        shell: msys2 {0}
        # I can't figure out why this isn't an env var already. It shows up with `env`.
        run: . prebuild/tarball.sh
      - name: Upload asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ steps.make_asset.outputs.asset_name }}
          artifactContentType: application/tar+gz
